{"ast":null,"code":"var _jsxFileName = \"/Users/serina/Desktop/robofriends/src/App.js\";\nimport React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport { robots } from './robots'; //Props are simply things that come out of \"state\"\n//So a parent feeds \"state\" into  a child component and as soon as child (components)components receives a \"state\" it's a property. That child can never change that property. \n// The parent just tells it what the \"state\" is and the child receives it as \"robots\"\n// So the first things we need to do is to start being able to use \"state\" in our app,\n// the description of what our \"state\" should be\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      console.log(event.target.value);\n      const filteredRobots = this.state.robots.filter(robots => {\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()); // if name of the robots in lowercase includes - and this does the comparison\n        // if anything in the sting includes\"toLowerCase\", then only return the robots that return true\n      });\n      console.log(filteredRobots);\n    };\n\n    this.state = {\n      robots: robots,\n      searchfield: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"RoboFriends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: this.onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        robots: this.state.robots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/serina/Desktop/robofriends/src/App.js"],"names":["React","Component","CardList","SearchBox","robots","App","constructor","onSearchChange","event","console","log","target","value","filteredRobots","state","filter","name","toLowerCase","includes","searchfield","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,MAAT,QAAuB,UAAvB,C,CAGA;AACA;AACA;AACA;AACA;;;;AAGA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AACxBK,EAAAA,WAAW,GAAG;AACV;;AADU,SAQdC,cARc,GAQGC,KAAD,IAAU;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaC,KAAzB;AACA,YAAMC,cAAc,GAAG,KAAKC,KAAL,CAAWV,MAAX,CAAkBW,MAAlB,CAAyBX,MAAM,IAAG;AACrD,eAAOA,MAAM,CAACY,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmC,KAAKJ,KAAL,CAAWK,WAAX,CAAuBF,WAAvB,EAAnC,CAAP,CADqD,CAErD;AACA;AACH,OAJsB,CAAvB;AAKAR,MAAAA,OAAO,CAACC,GAAR,CAAYG,cAAZ;AACH,KAhBa;;AAEV,SAAKC,KAAL,GAAa;AACTV,MAAAA,MAAM,EAAEA,MADC;AAETe,MAAAA,WAAW,EAAE;AAFJ,KAAb;AAIH;;AAYDC,EAAAA,MAAM,GAAI;AACN,wBACI;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,SAAD;AAAW,QAAA,YAAY,EAAE,KAAKb;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA,QAAC,QAAD;AAAU,QAAA,MAAM,EAAE,KAAKO,KAAL,CAAWV;AAA7B;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AA3BuB;;AA+B5B,eAAeC,GAAf","sourcesContent":["import React, { Component} from 'react';\nimport CardList from './CardList' ;\nimport SearchBox from './SearchBox';\nimport { robots } from './robots' ;\n\n\n//Props are simply things that come out of \"state\"\n//So a parent feeds \"state\" into  a child component and as soon as child (components)components receives a \"state\" it's a property. That child can never change that property. \n// The parent just tells it what the \"state\" is and the child receives it as \"robots\"\n// So the first things we need to do is to start being able to use \"state\" in our app,\n// the description of what our \"state\" should be\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: robots,\n            searchfield: ''\n        }\n    }\n\n    onSearchChange= (event)=> {\n        console.log(event.target.value);\n        const filteredRobots = this.state.robots.filter(robots =>{\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n            // if name of the robots in lowercase includes - and this does the comparison\n            // if anything in the sting includes\"toLowerCase\", then only return the robots that return true\n        })\n        console.log(filteredRobots);\n    }\n\n    render () {\n        return (\n            <div className='tc'>\n            <h1>RoboFriends</h1>\n            <SearchBox searchChange={this.onSearchChange}/>\n            <CardList robots={this.state.robots}/>\n            </div>\n        );\n    }\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}