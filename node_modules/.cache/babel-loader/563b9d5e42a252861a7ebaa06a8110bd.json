{"ast":null,"code":"import _classCallCheck from\"/Users/serina/Desktop/robofriends/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/serina/Desktop/robofriends/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/serina/Desktop/robofriends/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/serina/Desktop/robofriends/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import CardList from'../components/CardList';import SearchBox from'../components/SearchBox';import Scroll from'../components/Scroll';import ErrorBoundry from'../components/ErrorBoundry';import'./App.css';//Props are simply things that come out of \"state\"\n//So a parent feeds \"state\" into  a child component and as soon as child (components)components receives a \"state\" it's a property. That child can never change that property. \n// The parent just tells it what the \"state\" is and the child receives it as \"robots\"\n// So the first things we need to do is to start being able to use \"state\" in our app,\n// the description of what our \"state\" should be\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);_this=_super.call(this);_this.onSearchChange=function(event){_this.setState({searchfield:event.target.value});console.log(event.target.value);};_this.state={robots:[],searchfield:''};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;fetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(users){return _this2.setState({robots:users});});}// react don't use arrow function\n},{key:\"render\",value:function render(){var _this$state=this.state,robots=_this$state.robots,searchfield=_this$state.searchfield;var filteredRobots=this.state.robots.filter(function(robot){return robot.name.toLowerCase().includes(searchfield.toLowerCase());// if name of the robots in lowercase includes - and this does the comparison\n// if anything in the sting includes\"toLowerCase\", then only return the robots that return true\n});return!robots.length?/*#__PURE__*/_jsx(\"h1\",{children:\"Loading\"}):/*#__PURE__*/_jsxs(\"div\",{className:\"tc\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"f1\",children:\"RoboFriends\"}),/*#__PURE__*/_jsx(SearchBox,{searchChange:this.onSearchChange}),/*#__PURE__*/_jsx(Scroll,{children:/*#__PURE__*/_jsx(CardList,{robots:filteredRobots})})]});}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/serina/Desktop/robofriends/src/containers/App.js"],"names":["React","Component","CardList","SearchBox","Scroll","ErrorBoundry","App","onSearchChange","event","setState","searchfield","target","value","console","log","state","robots","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":"gcAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CACA,MAAO,WAAP,CAEA;AACA;AACA;AACA;AACA;2FAEMC,CAAAA,G,0FACF,cAAc,qCACV,wBADU,MAedC,cAfc,CAeE,SAACC,KAAD,CAAU,CACtB,MAAKC,QAAL,CAAe,CAACC,WAAW,CAAEF,KAAK,CAACG,MAAN,CAAaC,KAA3B,CAAf,EACAC,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACG,MAAN,CAAaC,KAAzB,EACH,CAlBa,CAEV,MAAKG,KAAL,CAAa,CACTC,MAAM,CAAE,EADC,CAETN,WAAW,CAAE,EAFJ,CAAb,CAFU,aAMb,C,iDAED,4BAAoB,iBAChBO,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACM,SAAAC,QAAQ,QAAGA,CAAAA,QAAQ,CAACC,IAAT,EAAH,EADd,EAECF,IAFD,CAEM,SAAAG,KAAK,QAAI,CAAA,MAAI,CAACZ,QAAL,CAAc,CAAEO,MAAM,CAAEK,KAAV,CAAd,CAAJ,EAFX,EAGH,CACL;sBAOI,iBAAU,CACN,gBAA8B,KAAKN,KAAnC,CAAOC,MAAP,aAAOA,MAAP,CAAeN,WAAf,aAAeA,WAAf,CACA,GAAMY,CAAAA,cAAc,CAAG,KAAKP,KAAL,CAAWC,MAAX,CAAkBO,MAAlB,CAAyB,SAAAC,KAAK,CAAG,CACpD,MAAOA,CAAAA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCjB,WAAW,CAACgB,WAAZ,EAAlC,CAAP,CACA;AACA;AACH,CAJsB,CAAvB,CAKA,MAAO,CAACV,MAAM,CAACY,MAAR,cACP,+BADO,cAGH,aAAK,SAAS,CAAC,IAAf,wBACA,WAAI,SAAS,CAAC,IAAd,yBADA,cAEA,KAAC,SAAD,EAAW,YAAY,CAAE,KAAKrB,cAA9B,EAFA,cAGA,KAAC,MAAD,wBACI,KAAC,QAAD,EAAU,MAAM,CAAEe,cAAlB,EADJ,EAHA,GAHJ,CAWH,C,iBAvCarB,S,EA0ClB,cAAeK,CAAAA,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport CardList from '../components/CardList' ;\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll' ;\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css' ;\n\n//Props are simply things that come out of \"state\"\n//So a parent feeds \"state\" into  a child component and as soon as child (components)components receives a \"state\" it's a property. That child can never change that property. \n// The parent just tells it what the \"state\" is and the child receives it as \"robots\"\n// So the first things we need to do is to start being able to use \"state\" in our app,\n// the description of what our \"state\" should be\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(users => this.setState({ robots: users}));\n    }\n// react don't use arrow function\n\n    onSearchChange= (event)=> {\n        this.setState( {searchfield: event.target.value} )\n        console.log(event.target.value);\n    }\n\n    render () {\n        const {robots, searchfield} = this.state;\n        const filteredRobots = this.state.robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n            // if name of the robots in lowercase includes - and this does the comparison\n            // if anything in the sting includes\"toLowerCase\", then only return the robots that return true\n        })\n        return !robots.length?\n        <h1>Loading</h1>:\n        (\n            <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox searchChange={this.onSearchChange}/>\n            <Scroll>\n                <CardList robots={filteredRobots}/>\n            </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}