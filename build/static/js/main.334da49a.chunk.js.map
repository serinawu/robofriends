{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","components/ErrorBoundry.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","Component","onSearchChange","event","setState","searchfield","target","value","console","log","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAZH,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACvB,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCWLK,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BACCA,EAAOC,KAAI,SAACC,EAAMC,GACnB,OACA,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCSEC,EAfG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKV,UAAU,MAAf,SACA,uBACAA,UAAU,qCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCAHI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAQ,CAAEC,UAAW,SAAUC,OAAO,OAASC,OAAQ,SAA5D,SACKJ,EAAMK,YCkDJC,GCrDYC,Y,wDDYvB,aAAe,IAAD,8BACV,gBAcJC,eAAgB,SAACC,GACb,EAAKC,SAAU,CAACC,YAAaF,EAAMG,OAAOC,QAC1CC,QAAQC,IAAIN,EAAMG,OAAOC,QAfzB,EAAKG,MAAQ,CACT3B,OAAQ,GACRsB,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAErB,OAAQgC,S,oBAS3C,WACI,MAA8BC,KAAKN,MAA5B3B,EAAP,EAAOA,OAAQsB,EAAf,EAAeA,YACTY,EAAiBD,KAAKN,MAAM3B,OAAOmC,QAAO,SAAAC,GAC5C,OAAOA,EAAM3C,KAAK4C,cAAcC,SAAShB,EAAYe,kBAIzD,OAAQrC,EAAOuC,OAGX,sBAAK3C,UAAU,KAAf,UACA,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAc2B,KAAKd,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUnB,OAAQkC,SAN1B,6C,GA7BUhB,cEDHsB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.334da49a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card= ({name, email, id}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow'>\n            <img alt='robots' src= {`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ( {robots} ) => {\n    return (\n        <div>\n        {robots.map((user, i) =>{\n        return(\n        <Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email}/>\n        );\n    })}\n</div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({ searchField, searchChange})  => {\n    return (\n        <div className='pa2'>\n        <input \n        className='pa3 ba b -- green bg-lightest-blue'\n        type='search' \n        placeholder='search robots'\n        onChange={searchChange}\n        />\n        </div>\n    );\n}\n\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style ={{ overflowY: 'scroll', border:'5px ' , height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList' ;\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll' ;\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css' ;\n\n//Props are simply things that come out of \"state\"\n//So a parent feeds \"state\" into  a child component and as soon as child (components)components receives a \"state\" it's a property. That child can never change that property. \n// The parent just tells it what the \"state\" is and the child receives it as \"robots\"\n// So the first things we need to do is to start being able to use \"state\" in our app,\n// the description of what our \"state\" should be\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(users => this.setState({ robots: users}));\n    }\n// react don't use arrow function\n\n    onSearchChange= (event)=> {\n        this.setState( {searchfield: event.target.value} )\n        console.log(event.target.value);\n    }\n\n    render () {\n        const {robots, searchfield} = this.state;\n        const filteredRobots = this.state.robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n            // if name of the robots in lowercase includes - and this does the comparison\n            // if anything in the sting includes\"toLowerCase\", then only return the robots that return true\n        })\n        return !robots.length?\n        <h1>Loading</h1>:\n        (\n            <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox searchChange={this.onSearchChange}/>\n            <Scroll>\n                <CardList robots={filteredRobots}/>\n            </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops. That is not good.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css' ;\nimport App from './containers/App' ;\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}